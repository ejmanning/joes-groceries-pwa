{"version":3,"sources":["components/GroceryListForm.js","components/Grocery.js","components/GroceryList.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["GroceryListForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Grocery","groceries","completeGroceryItem","removeGroceryItem","updateGroceryItem","setEdit","map","groceryItem","index","isComplete","onClick","GroceryList","setGroceries","test","newGroceryItems","updateGroceries","removeArr","filter","groceryItemID","newValue","prev","item","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.05dfe102.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\n\nfunction GroceryListForm(props) {\n  const[input, setInput] = useState(props.edit ? props.edit.value: '')\n\n  const inputRef = useRef(null)\n\n  useEffect(() => {\n    inputRef.current.focus()\n  })\n\n  const handleChange = e => {\n    setInput(e.target.value);\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    props.onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      text: input\n    });\n\n    setInput('')\n  }\n  return (\n    <form className = \"groceryListForm\" onSubmit={handleSubmit}>\n      {props.edit ? (\n\n        <><input\n          type=\"text\"\n          placeholder = \"Update grocery item\"\n          value={input}\n          name=\"text\"\n          className = \"groceryListForm-input edit\"\n          onChange = {handleChange}\n          ref={inputRef}\n        />\n        <button className = \"groceryListForm-button edit\">Update</button></>\n\n      )\n        :\n        (<><input\n          type=\"text\"\n          placeholder = \"Add to grocery list\"\n          value={input}\n          name=\"text\"\n          className = \"groceryListForm-input\"\n          onChange = {handleChange}\n          ref={inputRef}\n        />\n        <button className = \"groceryListForm-button\">Add to list</button>\n        </>)\n    }\n    </form>\n\n  )\n}\n\nexport default GroceryListForm\n","import React, {useState} from 'react'\nimport GroceryListForm from './GroceryListForm'\nimport {RiCloseCircleLine} from 'react-icons/ri'\nimport {TiEdit} from 'react-icons/ti'\n\nfunction Grocery( {groceries, completeGroceryItem, removeGroceryItem, updateGroceryItem}) {\n  const [edit, setEdit] = useState({\n    id: null,\n    value: ''\n  })\n\n  const submitUpdate = value => {\n    updateGroceryItem(edit.id, value)\n    setEdit({\n      id: null,\n      value: ''\n    })\n  }\n\n  if(edit.id) {\n    return <GroceryListForm edit={edit} onSubmit= {submitUpdate} />\n  }\n\n  return groceries.map ((groceryItem, index) => (\n    <div\n      className = {groceryItem.isComplete ? 'grocery-row complete' : 'grocery-row'}\n      key={index}\n    >\n      <div key={groceryItem.id} onClick={() => completeGroceryItem(groceryItem.id)}>\n        {groceryItem.text}\n      </div>\n      <div className=\"icons\">\n        <RiCloseCircleLine\n          onClick = {() => removeGroceryItem(groceryItem.id)}\n          className=\"delete-icon\"\n        />\n        <TiEdit\n          onClick = {() => setEdit({id: groceryItem.id, value: groceryItem.text})}\n          className=\"edit-icon\"\n        />\n      </div>\n\n    </div>\n  ))\n}\n\nexport default Grocery\n","import React, {useState} from 'react'\nimport GroceryListForm from './GroceryListForm'\nimport Grocery from './Grocery'\n\nfunction GroceryList() {\n  const[groceries, setGroceries] = useState([]);\n\n  const addGroceries = groceryItem => {\n    if(!groceryItem.text || /^\\s*$/.test(groceryItem.text)) {\n      return;\n    }\n\n    const newGroceryItems = [groceryItem, ...groceries]\n    setGroceries(newGroceryItems);\n  };\n\n  const updateGroceryItem = (groceryItemID, newValue) =>  {\n    if(!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    setGroceries(prev =>prev.map(item => (item.id === groceryItemID ? newValue : item)))\n  }\n\n  const removeGroceryItem = id => {\n    const removeArr = [...groceries].filter(groceryItem => groceryItem.id !== id)\n    setGroceries(removeArr);\n  }\n\n  const completeGroceryItem = id => {\n    let updateGroceries = groceries.map(groceryItem => {\n      if(groceryItem.id === id) {\n        groceryItem.isComplete = !groceryItem.isComplete\n      }\n      return groceryItem\n    })\n    setGroceries(updateGroceries);\n  }\n\n  return (\n    <div>\n      <h1>Add to Grocery List</h1>\n      <GroceryListForm onSubmit={addGroceries}/>\n      <Grocery\n        groceries = {groceries}\n        completeGroceryItem = {completeGroceryItem}\n        removeGroceryItem = {removeGroceryItem}\n        updateGroceryItem = {updateGroceryItem}\n      />\n\n    </div>\n  )\n\n}\n\nexport default GroceryList\n","import React from 'react';\nimport GroceryList from './components/GroceryList'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"GroceryListApp\">\n    <h1 className=\"heading\">Joe's Groceries</h1>\n      <GroceryList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}